<?php
// This class was automatically generated by a giiant build task
// You should not change it manually as it will be overwritten on next build

namespace common\models\attendance\base;

use Yii;

/**
 * This is the base-model class for table "ohrm_attendance_record".
 *
 * @property integer $id
 * @property integer $employee_id
 * @property string $first_daka_time
 * @property string $punch_in_utc_time
 * @property string $punch_in_note
 * @property string $punch_in_time_offset
 * @property string $punch_in_user_time
 * @property string $punch_in_actual_time
 * @property string $punch_out_utc_time
 * @property string $punch_out_note
 * @property string $punch_out_time_offset
 * @property string $punch_out_user_time
 * @property string $punch_out_actual_time
 * @property string $state
 * @property integer $is_in_status
 * @property integer $is_out_status
 * @property integer $work_shift_id
 * @property integer $pro_id
 * @property integer $exa_id
 * @property integer $is_pro
 * @property string $text_cont
 * @property string $create_time
 * @property string $end_time_afternoon
 * @property string $start_time_afternoon
 * @property string $work_start_time
 * @property string $work_middstart_time
 * @property string $work_middend_time
 * @property string $work_end_time
 * @property string $work_name
 * @property integer $daka_status
 * @property integer $clock_in
 * @property string $aliasModel
 */
abstract class AttendanceRecord extends \yii\db\ActiveRecord
{



    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'ohrm_attendance_record';
    }

    /**
     * @return \yii\db\Connection the database connection used by this AR class.
     */
    public static function getDb()
    {
        return Yii::$app->get('orangehrm');
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['id', 'employee_id', 'state'], 'required'],
            [['id', 'employee_id', 'work_shift_id', 'pro_id', 'exa_id'], 'integer'],
            [['first_daka_time', 'punch_in_utc_time', 'punch_in_user_time', 'punch_in_actual_time', 'punch_out_utc_time', 'punch_out_user_time', 'punch_out_actual_time', 'create_time', 'end_time_afternoon', 'start_time_afternoon', 'work_start_time', 'work_middstart_time', 'work_middend_time', 'work_end_time'], 'safe'],
            [['punch_in_note', 'punch_in_time_offset', 'punch_out_note', 'punch_out_time_offset', 'state'], 'string', 'max' => 255],
            [['is_in_status', 'is_out_status', 'is_pro', 'daka_status', 'clock_in'], 'integer', 'max' => 4],
            [['text_cont', 'work_name'], 'string', 'max' => 200],
            [['id'], 'unique']
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'employee_id' => 'Employee ID',
            'first_daka_time' => 'First Daka Time',
            'punch_in_utc_time' => 'Punch In Utc Time',
            'punch_in_note' => 'Punch In Note',
            'punch_in_time_offset' => 'Punch In Time Offset',
            'punch_in_user_time' => 'Punch In User Time',
            'punch_in_actual_time' => 'Punch In Actual Time',
            'punch_out_utc_time' => 'Punch Out Utc Time',
            'punch_out_note' => 'Punch Out Note',
            'punch_out_time_offset' => 'Punch Out Time Offset',
            'punch_out_user_time' => 'Punch Out User Time',
            'punch_out_actual_time' => 'Punch Out Actual Time',
            'state' => 'State',
            'is_in_status' => 'Is In Status',
            'is_out_status' => 'Is Out Status',
            'work_shift_id' => 'Work Shift ID',
            'pro_id' => 'Pro ID',
            'exa_id' => 'Exa ID',
            'is_pro' => 'Is Pro',
            'text_cont' => 'Text Cont',
            'create_time' => 'Create Time',
            'end_time_afternoon' => 'End Time Afternoon',
            'start_time_afternoon' => 'Start Time Afternoon',
            'work_start_time' => 'Work Start Time',
            'work_middstart_time' => 'Work Middstart Time',
            'work_middend_time' => 'Work Middend Time',
            'work_end_time' => 'Work End Time',
            'work_name' => 'Work Name',
            'daka_status' => 'Daka Status',
            'clock_in' => 'Clock In',
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeHints()
    {
        return array_merge(parent::attributeHints(), [
            'first_daka_time' => '第一次打卡时间',
            'punch_in_utc_time' => '上班打卡世界时间',
            'punch_in_note' => '上班备注',
            'punch_in_time_offset' => '上班打卡时差',
            'punch_in_user_time' => '上班打卡时间',
            'punch_in_actual_time' => '上班打卡实际时间',
            'punch_out_utc_time' => '下班打卡世界时间',
            'punch_out_note' => '下班备注',
            'punch_out_time_offset' => '下班打卡时差',
            'punch_out_user_time' => '下班打卡时间',
            'punch_out_actual_time' => '下班打卡实际时间',
            'state' => '状态',
            'is_in_status' => '上班迟到申请打卡状态 1上班申请   0 正常 2下班申请 ',
            'is_out_status' => '漏打卡取消申请 1,  拒绝 -1',
            'work_shift_id' => '班次id',
            'pro_id' => '审批人ID',
            'exa_id' => '证明人id',
            'is_pro' => '是否已经审批 1 是',
            'create_time' => '创建时间',
            'work_start_time' => '上班时间',
            'work_middstart_time' => '中间下班时间',
            'work_middend_time' => '中间上班时间',
            'work_end_time' => '下班时间',
            'work_name' => '班次名称',
            'daka_status' => '打卡状态 0正常 1迟到 2早退 3其他',
            'clock_in' => '下班是否打卡 1是',
        ]);
    }

    public function getEmployee()
    {
        return $this->hasOne(\common\models\employee\Employee::className(), ['emp_number' => 'employee_id']);
    }


}

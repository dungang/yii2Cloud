<?php
namespace frontend\controllers\v1;
use common\models\shift\RotationEmployee;
use common\models\shift\RotationList;
use common\models\shift\RotationResultNewest;
use common\models\shift\RotationResultTemp;
use common\models\shift\RotationRule;
use common\models\shift\RotationVersion;
use common\models\shift\RotationVersionResult;
use common\models\user\User;
use Yii;
use yii\db\Command;
use yii\web\Response;
use yii\web\Controller;
//use yii\helpers\ArrayHelper;
class RotationResultTempController extends \common\rest\Controller
{
    /**
     * @var string
     */
    public $modelClass = 'common\models\shift\RotationResultTemp';

    /**
     *
     * @var array
     */
    public $serializer = [
        'class' => 'common\rest\Serializer',    // 返回格式数据化字段
        'collectionEnvelope' => 'result',       // 制定数据字段名称
        'message' => 'OK',                      // 文本提示
        'errno'   => 0,
        'status'  =>'',
    ];
    /**
     * @param  [action] yii\rest\IndexAction
     * @return [type]
     */
    public function beforeAction($action)
    {
        $format = \Yii::$app->getRequest()->getQueryParam('format', 'json');

        if($format == 'xml'){
            \Yii::$app->response->format = \yii\web\Response::FORMAT_XML;
        }else{
            \Yii::$app->response->format = \yii\web\Response::FORMAT_JSON;
        }

        return $action;
    }

    /**
     * @param  [type]
     * @param  [type]
     * @return [type]
     */
    public function afterAction($action, $result){
        $result = parent::afterAction($action, $result);

        return $result;
    }

    public function behaviors()
    {
        $behaviors = parent::behaviors();
        $behaviors['contentNegotiator']['formats']['text/html'] = Response::FORMAT_HTML;
        return $behaviors;
    }

    public function actions()
    {
        $actions = parent::actions();
        unset($actions['index']);
        return $actions;
    }
    /**
     * @SWG\Post(path="/rotation-result-temp/create-version",
     *     tags={"云平台-rotationResultTemp-轮转中间表"},
     *     summary="创建轮转计划",
     *     description="新建轮转计划",
     *     produces={"application/json"},
     *     @SWG\Parameter(
     *        in = "formData",
     *        name = "Token",
     *        description = "Token",
     *        required = true,
     *        type = "integer",
     *     ),
     *     @SWG\Parameter(
     *        in = "formData",
     *        name = "rotationId",
     *        description = "轮转表id",
     *        required = true,
     *        type = "integer",
     *     ),
     *     @SWG\Parameter(
     *        in = "formData",
     *        name = "versionName",
     *        description = "模板名称",
     *        required = true,
     *        type = "integer",
     *     ),
     *     @SWG\Response(
     *         response = 200,
     *         description = "返回班次类型列表"
     *     ),
     *     @SWG\Response(
     *         response = 422,
     *         description = "Data Validation Failed 创建失败",
     *     )
     * )
     *
     **/
    //创建轮转版本表（rotationVersion）
    public function actionCreateVersion()
    {
        $post = Yii::$app->request->post();
        $rotationVersion = new RotationVersion();
        $rotationVersion->versionName = $post['versionName'];
        $rotationVersion->rotationId = $post['rotationId'];
        if($rotationVersion->save()){
            $this->serializer['errno']   = 0;
            $this->serializer['status']   = true;
            $this->serializer['message'] = "添加成功";
            return[];
        }else{
            $this->serializer['errno']   = 0;
            $this->serializer['status']   = false;
            $this->serializer['message'] = "添加失败";
            return[];
        }




        /**
         * 获取用户输入信息的模板名称, 前端返回的轮转表id
         * insert into rotationVersion (versionName,rotationId,status) value('计划1',2,0);
         *
         */

    }
    /**
     * @SWG\Post(path="/rotation-result-temp/publish",
     *     tags={"云平台-rotationResultTemp-轮转中间表"},
     *     summary="发布",
     *     description="发布",
     *     produces={"application/json"},
     *     @SWG\Parameter(
     *        in = "formData",
     *        name = "Token",
     *        description = "Token",
     *        required = true,
     *        type = "integer",
     *     ),
     *     @SWG\Parameter(
     *        in = "formData",
     *        name = "rotationId",
     *        description = "轮转id",
     *        required = true,
     *        type = "integer",
     *     ),
     *     @SWG\Parameter(
     *        in = "formData",
     *        name = "rotationVersionId",
     *        description = "轮转版本表id",
     *        required = true,
     *        type = "integer",
     *     ),
     *     @SWG\Parameter(
     *        in = "formData",
     *        name = "status",
     *        description = "发布或者调整",
     *        required = true,
     *        type = "integer",
     *     ),
     *     @SWG\Response(
     *         response = 200,
     *         description = "返回班次类型列表"
     *     ),
     *     @SWG\Response(
     *         response = 422,
     *         description = "Data Validation Failed 创建失败",
     *     )
     * )
     *
     **/
    //确认发布按钮
    public function actionPublish()
    {
        $rotationVersionId = Yii::$app->request->post('rotationVersionId');
        $rotationId = Yii::$app->request->post('rotationId');
        $status = Yii::$app->request->post('status');
        $rotationResultTemp = new RotationResultTemp();
        $all = $rotationResultTemp->getRotationResultTempPublish($rotationId);
        $row = array();
        foreach ($all as $k=>$v)
        {
            //$data = array();
            $countIn = json_decode($v['usersPrepareIn'],true);
            $countOut = json_decode($v['usersPrepareOut'],true);
            $date = date("Y年m月",strtotime($v['rotationDate']));
            /*if((count($countIn)-count($countOut)) !==0){
                $this->serializer['errno']   = 0;
                $this->serializer['status']   = false;
                $this->serializer['message'] = $date."人数不匹配,请调整后发布";
                return;
            }*/
            if(!empty($countIn)){
                foreach ($countIn as $key=>$in)
                {
                    if($in['errorInfo']){
                        $this->serializer['errno']   = 0;
                        $this->serializer['status']   = true;
                        $this->serializer['message'] = $date."有违背规则的，真的忽略这些直接发布吗？";
                    }
                    $row['time_in'] = $v['rotationDate'];
                    $row['work_station'] = $v['groupId'];
                    $row['emp_number'] = $in['userId'];
                    $data[]  = $row;
                }
            }

        }
        $user = new User();
        $aa = ['2019-2-4','2019-2-12'];
        $re = $user->putinSubunit($data,$aa);

        /*$rotation = RotationList::findOne($rotationId);
        $rotation->status = 1;
        $rotation->pushTime = date('Y-m-d',time());
        $rotation->save();*/
//        return $data;
        exit;
        $this->serializer['errno']   = 0;
        $this->serializer['status']   = true;
        $this->serializer['message'] = "发布成功";
        return;
        /**
         * 查询轮转结果中间表rotationResultTemp
         * select rotationDate,groupId,usersRecommendUnselected,usersPrepareIn,usersPrepareOut,rotationUserCount where rotationId=2;
         * 获取数据后存入,轮转结果原始表rotationResultOriginal ,此表只存一次
         * insert into rotationResultOriginal (rotationVersionId,rotationId,rotationDate,groupId,usersRecommend...rotationUserCount) value(...);
         * 同时更改 轮转表（rotationList）status的状态为1 已发布
         * update rotationList set status=1 pushTime=time() where rotationId=2;
         *
         */
    }
    /**
     * @SWG\Post(path="/rotation-result-temp/update",
     *     tags={"云平台-rotationResultTemp-轮转中间表"},
     *     summary="显示年月",
     *     description="显示年月",
     *     produces={"application/json"},
     *     @SWG\Parameter(
     *        in = "formData",
     *        name = "Token",
     *        description = "Token",
     *        required = true,
     *        type = "integer",
     *     ),
     *     @SWG\Response(
     *         response = 200,
     *         description = "返回班次类型列表"
     *     ),
     *     @SWG\Response(
     *         response = 422,
     *         description = "Data Validation Failed 创建失败",
     *     )
     * )
     *
     **/
    //暂时不需要
    public function actionUpdate()
    {
        $a = '[{
                "label": "此轮转计划未发布时显示：",
                "status":1,
                
                "name": "2"
            }
            ]';
        $b = json_decode($a);
        $this->serializer['errno']   = 0;
        $this->serializer['status']   = true;
        $this->serializer['message'] = "获取成功";
        return $b;
    }
    /**
     * @SWG\Post(path="/rotation-result-temp/show-date",
     *     tags={"云平台-rotationResultTemp-轮转中间表"},
     *     summary="显示年月",
     *     description="显示年月",
     *     produces={"application/json"},
     *     @SWG\Parameter(
     *        in = "formData",
     *        name = "Token",
     *        description = "Token",
     *        required = true,
     *        type = "integer",
     *     ),

     *     @SWG\Parameter(
     *        in = "formData",
     *        name = "rotationId",
     *        description = "轮转id",
     *        required = true,
     *        type = "integer",
     *     ),

     *     @SWG\Response(
     *         response = 200,
     *         description = "返回班次类型列表"
     *     ),
     *     @SWG\Response(
     *         response = 422,
     *         description = "Data Validation Failed 创建失败",
     *     )
     * )
     *
     **/
    //显示年月2019年02月  03月 ... 2020年01月
    public function actionShowDate()
    {
        //status为确认发布或者确认调整,'label'=>'确认发布或者确认调整'  status值1代表确认发布
        $b = [
                  'label'=>'确认发布',"id"=>"1","status"=>"1","name"=>"2",
                  'time'=>[
                        ["label"=>"2019年01月","name"=>"1"],
                        ["label"=>"07月","name"=>"7"],
                        ["label"=>"08月","name"=>"8"],
                        ["label"=>"09月","name"=>"9"],
                        ["label"=>"10月","name"=>"10"],
                        ["label"=>"11月","name"=>"11"],
                        ["label"=>"12月","name"=>"12"],
                        ["label"=>"2020-01","name"=>"13"],
                  ],
        ];
        $rotationId = Yii::$app->request->post('rotationId');
        $RotationList = new RotationList();
        $RotationListOne = $RotationList->getRotationOne($rotationId);
        $rotationDateBegin = $RotationListOne['rotationDateBegin'];
        $rotationDateEnd = $RotationListOne['rotationDateEnd'];
        $status = $RotationListOne['status'];
        $hellp = getMonths($rotationDateBegin,$rotationDateEnd);
        $year = '';
        $arr = array();
        $list = array();
        foreach ($hellp as $k=>$v){
            $y = date('Y',strtotime($v));
            if(empty($year)){
                $year = $y;
                $arr[] = date('Y年m月',strtotime($v));
            }else{
                $y = date('Y',strtotime($v));
                if($y==$year){
                    $arr[] = date('m月',strtotime($v));
                }else{
                    $year = $y;
                    $arr[] = date('Y年m月',strtotime($v));;
                }
            }
        }
        $data = array();
        foreach ($arr as $key=>$value){
            $data[$key]['label'] = $value;
            foreach ($hellp as $k=>$v){
                $data[$k]['name'] =$v;
            }
        }
        if($status == 1){
            $list['label'] = '确认调整';
        }else{
            $list['label'] = '确认发布';
        }
            $list['status'] = $status;
        $list['name'] = $rotationDateBegin;
        $list['time'] = $data;
        $this->serializer['errno'] = 0;
        $this->serializer['status'] = true;
        $this->serializer['message'] = "获取成功";
        return $list;
        /**
         * 从轮转表（rotationList）取出开始时间和结束时间, 接收轮转表的id
         * select rotationDateBegin,rotationDateEnd from rotationList where id = 2;
         * 用时间函数转成月份的格式
         */


    }
    /**
     * @SWG\Post(path="/rotation-result-temp/show-version",
     *     tags={"云平台-rotationResultTemp-轮转中间表"},
     *     summary="显示版本表",
     *     description="显示版本表",
     *     produces={"application/json"},
     *     @SWG\Parameter(
     *        in = "formData",
     *        name = "Token",
     *        description = "Token",
     *        required = true,
     *        type = "integer",
     *     ),
     *     @SWG\Parameter(
     *        in = "formData",
     *        name = "rotationId",
     *        description = "轮转表id",
     *        required = true,
     *        type = "integer",
     *     ),
     *     @SWG\Response(
     *         response = 200,
     *         description = "返回班次类型列表"
     *     ),
     *     @SWG\Response(
     *         response = 422,
     *         description = "Data Validation Failed 创建失败",
     *     )
     * )
     *
     **/
    //显示轮转版本表（rotationVersion）
    public function actionShowVersion()
    {

        $rotationId = Yii::$app->request->post('rotationId');
        $RotationList = new RotationList();
        $RotationListOne = $RotationList->getRotationOne($rotationId);
        $rotationVersion = new RotationVersion();
        $RotationListStatus = $RotationListOne['status'];
        $list = $rotationVersion->getVersionAll($rotationId,$RotationListStatus);
        $data = [];
        foreach ($list as $key=>$value){
            $data[$key]['label'] = $value['versionName'];
            $data[$key]['value'] = $value['id'];
        }
//        var_dump($data);exit;
        $b = [
            ["label"=>"恢复到某版本(单选)","value"=>"-1"],
            ["label"=>"版本3","value"=>"3"],
            ["label"=>"版本1","value"=>"1"],
            ["label"=>"版本2","value"=>"2"]
        ];
        $this->serializer['errno'] = 0;
        $this->serializer['status'] = true;
        $this->serializer['message'] = "获取成功";
        return $data;
        /**查询已发布的版本
         * select versionName form rotationVersion where rotationId=2 and status=1;
         */

    }
    /**
     * @SWG\Post(path="/rotation-result-temp/show-person",
     *     tags={"云平台-rotationResultTemp-轮转中间表"},
     *     summary="显示满足人数",
     *     description="显示满足人数",
     *     produces={"application/json"},
     *     @SWG\Parameter(
     *        in = "formData",
     *        name = "Token",
     *        description = "Token",
     *        required = true,
     *        type = "integer",
     *     ),
     *     @SWG\Parameter(
     *        in = "formData",
     *        name = "versionid",
     *        description = "轮转版本表id",
     *        required = true,
     *        type = "integer",
     *     ),
     *     @SWG\Parameter(
     *        in = "formData",
     *        name = "rotationId",
     *        description = "轮转表id",
     *        required = true,
     *        type = "integer",
     *     ),
     *     @SWG\Parameter(
     *        in = "formData",
     *        name = "rotationDate",
     *        description = "轮转日期",
     *        required = true,
     *        type = "string",
     *     ),
     *
     *     @SWG\Response(
     *         response = 200,
     *         description = "返回班次类型列表"
     *     ),
     *     @SWG\Response(
     *         response = 422,
     *         description = "Data Validation Failed 创建失败",
     *     )
     * )
     *
     **/
    public function actionShowPerson()
    {
        $post = Yii::$app->request->post();
        $rotationId = $post['rotationId'];
        $rotationDate = $post['rotationDate'];

        $rotationList = new RotationList();
        $user = new User();
        $RotationEmployee = new RotationEmployee();
        //通过轮转id获取一条轮转计划 从而抽取下面参加轮转的组信息
        $RotationOne = $rotationList->getRotationOne($rotationId);
        $groupInfo = json_decode($RotationOne['groupInfo'],true);
        //从轮转表获取$groupInfo为数组形式[11,12]
        $groupInfo = array_column($groupInfo,'groupId');
        $ruleType = 'out';

        /*//需要组信息  时间段参数获取基础人员信息
        $userAll = $user->RotationEmployee($groupInfo,$rotationDate);
//        var_dump($userAll);exit;
        //先暂时不放到model层
//        $RotationEmployee->createEmployee($userAll);

        //从基础人员里筛选初步参加轮转的人存储到 轮转人员信息临时表(rotationEmployee)
        if(is_array($userAll)){
            foreach ($userAll as $key=>$value){
                foreach ($value as $k=>$v){
                    $month = $v['title_time'];
                    $now = date('Y-m-d');
                    $month = getMonthNum($month,$now);//职称取得的月数
                    $age = $v['emp_birthday'];
                    $age = getAge($age);//获取年龄
                    $RotationEmployee = new RotationEmployee();
                    //先暂时这样判断取值,后续要加上时间字段rotationDat
                    $RotationEmployeelist = $RotationEmployee->getRotationEmployeeAll($groupInfo,$rotationDate);
                    if($v['is_rotation'] == null){//一定要不为空,现在测试数据库基本都为空,先存上
                        if(empty($RotationEmployeelist)){
                            $RotationEmployee->rotationDate = $rotationDate;
                            $RotationEmployee->work_station = $v['work_station'];
                            $RotationEmployee->emp_firstname = $v['emp_firstname'];
                            $RotationEmployee->emp_number = $v['emp_number'];
                            $RotationEmployee->work_time = $v['work_time'];
                            $RotationEmployee->count_work_time = $v['count_work_time'];
                            $RotationEmployee->is_leader = $v['is_leader'];
                            $RotationEmployee->title_id = $v['title_id'];
                            $RotationEmployee->title_time = $v['title_time'];
                            $RotationEmployee->month = $month;
                            $RotationEmployee->emp_gender = $v['emp_gender'];
                            $RotationEmployee->record_id = $v['record_id'];
                            $RotationEmployee->emp_birthday = $v['emp_birthday'];
                            $RotationEmployee->age = $age;
                            $RotationEmployee->is_rotation = $v['is_rotation'];
                            $RotationEmployee->mutual_exclusion = $v['mutual_exclusion'];
                            if(!$RotationEmployee->save()){

                            }
                        }
                    }
                }
            }
        }*/

        //存储到中间表（rotationResultTemp）
        /*foreach ($groupInfo as $key=>$groupId)
        {
            //获取轮转id ,组, 和调出调入类型的规则
            $RotationRule = new RotationRule();
            $ruleAll = $RotationRule->getRuleAll($rotationId,$groupId,$ruleType);
            //调取  规则筛选函数
            $RotationRule->checkRuleOut($ruleAll,$groupId);
            //获取到每个组符合调出条件的全部人串  存储到轮转人员信息临时表(rotationEmployee)
            $rotationEmployee = new RotationEmployee();
            //根据小组,时间月份rotationDate  轮转表id 状态isDel
            $rotationEmployeIsDel = $rotationEmployee->getStatusAll($groupId,$rotationDate);
            if(!empty($rotationEmployeIsDel)){
                //存储到  轮转结果中间表（rotationResultTemp）
                $list = array();
                foreach ($rotationEmployeIsDel as $k=>$v){
                    $list[$k]['userId'] = $v['emp_number'];
                    $list[$k]['userName'] = $v['emp_firstname'];
                }
                $RotationResultTemp = new RotationResultTemp();
                $RotationResultTempOne = $RotationResultTemp->getRotationResultTempOne($rotationId,$rotationDate,$groupId);
                if(empty($RotationResultTempOne)){
                    $RotationResultTemp->rotationId = $rotationId;
                    $RotationResultTemp->rotationDate = $rotationDate;
                    $RotationResultTemp->groupId = $groupId;
                    $RotationResultTemp->usersRecommend = json_encode($list,JSON_UNESCAPED_UNICODE);
                    $RotationResultTemp->usersRecommendUnselected = json_encode($list,JSON_UNESCAPED_UNICODE);
                    $RotationResultTemp->save();

                }
            }

        }*/
        $RotationResultTemp = new RotationResultTemp();
        //从 轮转结果中间表（rotationResultTemp）取出轮转表id,时间 为条件
        $RotationResultTempAll = $RotationResultTemp->getRotationResultTemp($rotationId,$rotationDate);
        $result = array();
        $userGroupName = $user->getSmallSubunit('xajdyfyyxb');
        //创建一个数组，用一个数组的值作为其键名，($userAll里的id作为键名)另一个数组的值作为其值
        $userGroupName = array_combine(array_column($userGroupName,'id'),$userGroupName);
        foreach ($RotationResultTempAll as $key=>$value)
        {
            //剩余人串
            $usersRecommendUnselected = json_decode($value['usersRecommendUnselected'],true);
            //调入的人串
            $usersPrepareIn = json_decode($value['usersPrepareIn'],true);
            //调出的人串
            $usersPrepareOut = json_decode($value['usersPrepareOut'],true);
            $result[$key]['groupName'] = $userGroupName[$value['groupId']]['name'];
            $result[$key]['id'] = $value['groupId'];
            $count1 = count($usersRecommendUnselected);
            $count2 = count($usersPrepareIn);
            $count3 = count($usersPrepareOut);
            $count = $count2-$count3;
            $max = max($count1,$count2,$count3);
            $row = array();
            for ($i=0;$i<$max;$i++)
            {
                if(!empty($usersPrepareIn[$i])){
                    if(array_key_exists('isError',$usersPrepareIn[$i])){
                        $row[$i][] = ['id'=>$usersPrepareIn[$i]['userId'],
                            'name'=>$usersPrepareIn[$i]['userName'],
                            'type'=>'0',
                            'isError'=>$usersPrepareIn[$i]['isError'],
                            'errorInfo'=>$usersPrepareIn[$i]['errorInfo']
                        ];
                    }else{
                        $row[$i][] = ['id'=>$usersPrepareIn[$i]['userId'],
                            'name'=>$usersPrepareIn[$i]['userName'],
                            'type'=>'0',
                            'isError'=>false,
                            'errorInfo'=>''
                        ];
                    }

                }else{
                    $row[$i][] = ['id'=>'','name'=>'','type'=>'0','isError'=>false,'errorInfo'=>''];
                }
                if(!empty($usersRecommendUnselected[$i])){
                    $row[$i][] = ['id'=>$usersRecommendUnselected[$i]['userId'],
                        'name'=>$usersRecommendUnselected[$i]['userName'],
                        'type'=>'1',
                        'isError'=>false,
                        'errorInfo'=>''
                    ];
                }else{
                    $row[$i][] = ['id'=>'','name'=>'','type'=>'1','isError'=>false,'errorInfo'=>''];
                }
                if(!empty($usersPrepareOut[$i])){
                    $row[$i][] = ['id'=>$usersPrepareOut[$i]['userId'],
                        'name'=>$usersPrepareOut[$i]['userName'],
                        'type'=>'2',
                        'isError'=>false,
                        'errorInfo'=>''
                    ];
                }else{
                    $row[$i][] = ['id'=>'',
                        'name'=>'',
                        'type'=>'2',
                        'isError'=>false,
                        'errorInfo'=>''
                    ];
                }
            }

            $result[$key]['count'] = $count;
            $result[$key]['row'] = $row;

        }

        $this->serializer['errno']   = 0;
        $this->serializer['status']   = true;
        $this->serializer['message'] = "获取成功";
        return $result;


        ///////////////////////////////////////
        $post = Yii::$app->request->post();
        if($post['rotationDate']=='7'){
        $a = ["name"=>"1"];
        //$b = json_decode($a);
        $this->serializer['errno']   = 100;
        $this->serializer['status']   = false;
        $this->serializer['message'] = "错误了";
        return $a;
    }

        $a = '[{
                "groupName": "A组",
                "id": "111",
                "count": "10",
                "row": [
                        [{
                        "id": "1",
                        "name": "张三1",
                        "type": "0",
                        "isError": false,
                        "errorInfo": "输出错误信息"
                    }, {
                        "id": "2",
                        "name": "张三2",
                        "type": "1",
                        "isError": false,
                        "errorInfo": ""
                    }, {
                        "id": "2",
                        "name": "张三3",
                        "type": "2",
                        "isError": false,
                        "errorInfo": ""
                    }],
                    [{
                        "id": "",
                        "name": "",
                        "type": "0",
                        "isError": false,
                        "errorInfo": ""
                    }, {
                        "id": "1",
                        "name": "张三21223",
                        "type": "1",
                        "isError": false,
                        "errorInfo": ""
                    }, {
                        "id": "1",
                        "name": "张三222",
                        "type": "2",
                        "isError": false,
                        "errorInfo": ""
                    }]
                ]
            },
            {
                "groupName": "B组",
                "id": "111",
                "row": [
                    [{
                        "id": "1",
                        "name": "张三5757",
                        "type": "0",
                        "isError": false,
                        "errorInfo": ""
                    }, {
                        "id": "1",
                        "name": "张三174",
                        "type": "1",
                        "isError": false,
                        "errorInfo": ""
                    }, {
                        "id": "1",
                        "name": "张三178",
                        "type": "2",
                        "isError": false,
                        "errorInfo": ""
                    }],
                    [{
                        "id": "1",
                        "name": "张三786",
                        "type": "0",
                        "isError": false,
                        "errorInfo": ""
                    }, {
                        "id": "1",
                        "name": "张三453",
                        "type": "1",
                        "isError": false,
                        "errorInfo": ""
                    }, {
                        "id": "1",
                        "name": "张三123123",
                        "type": "2",
                        "isError": false,
                        "errorInfo": ""
                    }]
                ]
            }, {
                    "groupName": "C组",
                    "id": "111",
                    "row": [
                    [{
                        "id": "1",
                        "name": "张三",
                        "type": "0",
                        "isError": false,
                        "errorInfo": ""
                    }, {
                        "id": "1",
                        "name": "张三",
                        "type": "1",
                        "isError": false,
                        "errorInfo": ""
                    }, {
                        "id": "1",
                        "name": "张三",
                        "type": "2",
                        "isError": false,
                        "errorInfo": ""
                    }],
                    [{
                        "id": "1",
                        "name": "张三",
                        "type": "0",
                        "isError": false,
                        "errorInfo": ""
                    }, {
                        "id": "1",
                        "name": "张三",
                        "type": "1",
                        "isError": false,
                        "errorInfo": ""
                    }, {
                        "id": "1",
                        "name": "张三",
                        "type": "2",
                        "isError": false,
                        "errorInfo": ""
                    }]
                ]
            }]';
        $b = json_decode($a);
        $this->serializer['errno']   = 0;
        $this->serializer['status']   = true;
        $this->serializer['message'] = "获取成功";
        return $b;
        /**
         *
         *第一次进来没有结果时会全部显示满足条件的全部人串, 拟调入和拟调出人串都为空
         * select usersRecommend,usersPrepareIn,usersPrepareOut  where  rotationId=3
         */

    }
    /**
     * @SWG\Post(path="/rotation-result-temp/show-mutual",
     *     tags={"云平台-rotationResultTemp-轮转中间表"},
     *     summary="显示满足人数",
     *     description="显示满足人数",
     *     produces={"application/json"},
     *     @SWG\Parameter(
     *        in = "formData",
     *        name = "Token",
     *        description = "Token",
     *        required = true,
     *        type = "string",
     *     ),
     *     @SWG\Parameter(
     *        in = "formData",
     *        name = "firstgroupid",
     *        description = "第一个组id",
     *        required = true,
     *        type = "integer",
     *     ),
     *     @SWG\Parameter(
     *        in = "formData",
     *        name = "secondgroupid",
     *        description = "第二个组id",
     *        required = true,
     *        type = "integer",
     *     ),
     *     @SWG\Parameter(
     *        in = "formData",
     *        name = "firstemp",
     *        description = "第一个员工id",
     *        required = true,
     *        type = "integer",
     *     ),

     *     @SWG\Parameter(
     *        in = "formData",
     *        name = "secondemp",
     *        description = "第二个员工id",
     *        required = true,
     *        type = "integer",
     *     ),

     *     @SWG\Parameter(
     *        in = "formData",
     *        name = "rotationDate",
     *        description = "时间月份",
     *        required = true,
     *        type = "integer",
     *     ),
     *     @SWG\Parameter(
     *        in = "formData",
     *        name = "rotationId",
     *        description = "轮转表id",
     *        required = true,
     *        type = "integer",
     *     ),
     *     @SWG\Response(
     *         response = 200,
     *         description = "返回班次类型列表"
     *     ),
     *     @SWG\Response(
     *         response = 422,
     *         description = "Data Validation Failed 创建失败",
     *     )
     * )
     *
     **/
    //数据交互
    public function actionShowMutual()
    {

        $post = Yii::$app->request->post();

        $firstgroupid = Yii::$app->request->post('firstgroupid');
        $secondgroupid = Yii::$app->request->post('secondgroupid');
        $firstemp = Yii::$app->request->post('firstemp');
        $secondemp = Yii::$app->request->post('secondemp');
        $rotationDate = Yii::$app->request->post('rotationDate');
        $rotationId = Yii::$app->request->post('rotationId');

        //判断是否是同一组人员
        if($firstgroupid == $secondgroupid){
            $this->serializer['errno'] = 22;
            $this->serializer['status'] = false;
            $this->serializer['message'] = "不能在同组操作";
            return;
        }
        $ruleType = 'in';
        $transaction = Yii::$app->db->beginTransaction();

        try{
            $RotationResultTemp = new RotationResultTemp();
            $rotationEmployee = new RotationEmployee();
            $RotationRule = new RotationRule();

//            $secondGroup = $RotationResultTemp->getRotationResultTempOb($rotationId,$rotationDate,$secondgroupid);
            //取出将要调入另一个组的人员信息(第一个组id,第一个员工id)

            $firstEmp = $rotationEmployee->getrotationEmployeeOne($firstgroupid,$firstemp);
            //检测要接收此人员的条件是否符合(将要进入的组,第二个组id)
            $SecondGroupRull = $RotationRule->getRuleAll($rotationId,$secondgroupid,$ruleType);


            if(!empty($message)){
                $this->serializer['errno'] = 0;
                $this->serializer['status'] = false;
                $this->serializer['message'] = $message;
            }
            $RotationResultTemp = new RotationResultTemp();
            $firstGroup = $RotationResultTemp->getRotationResultTempOne($rotationId,$rotationDate,$firstgroupid);
            $firstGroupSave = RotationResultTemp::findOne(['rotationId'=>$rotationId,'rotationDate'=>$rotationDate,'groupId'=>$firstgroupid]);
            $firstRecommendUnselected = json_decode($firstGroup['usersRecommendUnselected'],true);
            $firstPrepareOut = json_decode($firstGroup['usersPrepareOut'],true);

            foreach ($firstRecommendUnselected as $key=>$emp)//从剩余人串字段到调出人串
            {
                if($firstemp == $emp['userId']){
                    $firstRecommendUnselected[$key]['userId'] = '';
                    $firstRecommendUnselected[$key]['userName'] = '';
                    $firstPrepareOut[] = ['userId'=>$firstemp,'userName'=>$emp['userName']];
                }
            }
            //从第一个组里的 剩余人串(满足条件)减一个人  调出人串加一个人
            $firstGroupSave->usersRecommendUnselected = json_encode($firstRecommendUnselected,JSON_UNESCAPED_UNICODE);
            $firstGroupSave->usersPrepareOut = json_encode($firstPrepareOut,JSON_UNESCAPED_UNICODE);
            $firstGroupSave->save();

            //从第二个组里的调入人串加一个人,就是第一个人员信息
            $secondGroup = $RotationResultTemp->getRotationResultTempOne($rotationId,$rotationDate,$secondgroupid);
            $secondGroupSave = RotationResultTemp::findOne(['rotationId'=>$rotationId,'rotationDate'=>$rotationDate,'groupId'=>$secondgroupid]);
            $secondGroupPrepareIn = json_decode($secondGroup['usersPrepareIn'],true);
            $secondGroupPrepareIn[] = ['userId'=>$firstemp,'userName'=>$firstEmp['emp_firstname']];
            $secondGroupSave->usersPrepareIn = json_encode($secondGroupPrepareIn,JSON_UNESCAPED_UNICODE);
            $secondGroupSave->save();
            $secondGroup = RotationResultTemp::findOne(['rotationId'=>$rotationId,'rotationDate'=>$rotationDate,'groupId'=>$secondgroupid]);
            $message = $RotationRule->checkRuleIn($SecondGroupRull,$secondGroup);
//            var_dump($message);
            $transaction->commit();
            $this->serializer['errno'] = 0;
            $this->serializer['status'] = true;
            $this->serializer['message'] = "获取成功";
            return;
        }catch (\Exception $e){
            $transaction->rollBack();
            $this->serializer['errno'] = 0;
            $this->serializer['status'] = false;
            $this->serializer['message'] = "拖拽失败";
            return;
        }


        /**
         *
         * 获取轮转表id,A组成员user1id,B组成员id,首先检查A组user1符合调入规则 再检查B组是否符合A组调入条件
         * select rotationRuleWarehouse.ruleTypeName,rotationRuleWarehouse.ruleTitle,rotationRule.ruleType,rotationRule.rotationRuleWarehouseId,rotationRule.select1,rotationRule.select2
         *  inner join rotationRule.ruleType=rotationRuleWarehouse.rotationRuleWarehouseId
         * 修改拟调入人串 unset()函数,
         * update rotationResultTemp set usersPrepareIn="",usersPrepareOut="" where rotationId=2 and rotationDate=5;
         * groupId=2 and userid=3
         */
    }
    /**
     * @SWG\Post(path="/rotation-result-temp/del-emp",
     *     tags={"云平台-rotationResultTemp-轮转中间表"},
     *     summary="差掉组人员",
     *     description="显示满足人数",
     *     produces={"application/json"},
     *     @SWG\Parameter(
     *        in = "formData",
     *        name = "Token",
     *        description = "Token",
     *        required = true,
     *        type = "integer",
     *     ),
     *     @SWG\Parameter(
     *        in = "formData",
     *        name = "firstgroupid",
     *        description = "第一个组id",
     *        required = true,
     *        type = "integer",
     *     ),

     *     @SWG\Parameter(
     *        in = "formData",
     *        name = "firstemp",
     *        description = "第一个员工id",
     *        required = true,
     *        type = "integer",
     *     ),
     *     @SWG\Parameter(
     *        in = "formData",
     *        name = "firstempname",
     *        description = "第一个员工姓名",
     *        required = true,
     *        type = "integer",
     *     ),
     *     @SWG\Parameter(
     *        in = "formData",
     *        name = "rotationDate",
     *        description = "时间月份",
     *        required = true,
     *        type = "integer",
     *     ),
     *     @SWG\Parameter(
     *        in = "formData",
     *        name = "rotationId",
     *        description = "轮转表id",
     *        required = true,
     *        type = "integer",
     *     ),
     *     @SWG\Response(
     *         response = 200,
     *         description = "返回班次类型列表"
     *     ),
     *     @SWG\Response(
     *         response = 422,
     *         description = "Data Validation Failed 创建失败",
     *     )
     * )
     *
     **/
    public function actionDelEmp()
    {
        $post = Yii::$app->request->post();
        $firstgroupid = $post['firstgroupid'];//第一个组id
        $firstemp = $post['firstemp'];//第一个员工id
        $rotationDate = $post['rotationDate'];//时间月份
        $rotationId = $post['rotationId'];//轮转表id

        $transaction = Yii::$app->db->beginTransaction();

        try{
            $RotationResultTemp = new RotationResultTemp();
            $firstGroup = $RotationResultTemp->getRotationResultTempOb($rotationId,$rotationDate,$firstgroupid);
            $usersPrepareIn = json_decode($firstGroup->usersPrepareIn,true);
            $usersPrepareIn = $RotationResultTemp->unsetArray($usersPrepareIn,$firstemp);

            //更新拟调入字段, 减掉叉掉的人员
            $firstGroup->usersPrepareIn = json_encode($usersPrepareIn,JSON_UNESCAPED_UNICODE);
//            $firstGroup->save();

            //找出原来属于的组
            $RotationResultTempList = $RotationResultTemp->getRotationResultTemp($rotationId,$rotationDate);
            $group = array();
            foreach ($RotationResultTempList as $key=>$value)
            {
                //循环原始的满足条件的全部人串
                $usersRecommend = json_decode($value['usersRecommend'],true);
                foreach ($usersRecommend as $k=>$v)
                {
                    if($firstemp == $v['userId']){
                        $group['groupId'] = $value['groupId'];
                        $group['userName'] = $v['userName'];
                    }
                }
            }

            //获取到属于原来的组,查询 ,恢复到剩余人串 并且拟调出字段减掉此人员
            $RotationResultTempBack = $RotationResultTemp->getRotationResultTempOb($rotationId,$rotationDate,$group['groupId']);
            $usersPrepareOutBack = json_decode($RotationResultTempBack->usersPrepareOut,true);
            $usersRecommendUnselectedBack = json_decode($RotationResultTempBack->usersRecommendUnselected,true);
            $usersPrepareOutBack = $RotationResultTemp->unsetArray($usersPrepareOutBack,$firstemp);

            foreach($usersRecommendUnselectedBack as $key=>$val){
                if($val['userId'] == ''){
                    $usersRecommendUnselectedBack[$key]['userId'] = $firstemp;
                    $usersRecommendUnselectedBack[$key]['userName'] = $group['userName'];
                    break;
                }
            }
            asort($usersRecommendUnselectedBack);
            var_dump($usersRecommendUnselectedBack);
            exit;
            $RotationResultTempBack->usersPrepareOut = json_encode($usersPrepareOutBack,JSON_UNESCAPED_UNICODE);
            $RotationResultTempBack->usersRecommendUnselected = json_encode($usersRecommendUnselectedBack,JSON_UNESCAPED_UNICODE);
            $RotationResultTempBack->save();

            $transaction->commit();
            $this->serializer['errno']   = 0;
            $this->serializer['status']   = true;
            $this->serializer['message'] = "删除成功";
            return;
        }catch (\Exception $e){

            $transaction->rollBack();
            $this->serializer['errno'] = 0;
            $this->serializer['status'] = false;
            $this->serializer['message'] = "删除失败";
            return;
        }
        /**
         *
         * 如果从A组叉掉一个人,此人员应返回到原来的组满足条件位置传入的时候带着原来的组id和人员id
         * update rotationResultTemp set usersPrepareIn where rotationId=2 and rotationDate=4 and groupid=2
         *
         */
    }
    /**
     * @SWG\Post(path="/rotation-result-temp/recount",
     *     tags={"云平台-rotationResultTemp-轮转中间表"},
     *     summary="重新计算",
     *     description="重新计算",
     *     produces={"application/json"},
     *     @SWG\Parameter(
     *        in = "formData",
     *        name = "Token",
     *        description = "Token",
     *        required = true,
     *        type = "integer",
     *     ),
     *     @SWG\Parameter(
     *        in = "formData",
     *        name = "rotationId",
     *        description = "轮转表id",
     *        required = true,
     *        type = "integer",
     *     ),
     *     @SWG\Parameter(
     *        in = "formData",
     *        name = "rotationDate",
     *        description = "时间月份",
     *        required = true,
     *        type = "integer",
     *     ),
     *     @SWG\Response(
     *         response = 200,
     *         description = "返回班次类型列表"
     *     ),
     *     @SWG\Response(
     *         response = 422,
     *         description = "Data Validation Failed 创建失败",
     *     )
     * )
     *
     **/
    public function actionRecount()
    {
        $this->serializer['errno']   = 0;
        $this->serializer['status']   = true;
        $this->serializer['message'] = "获取成功";
        /**
         * 判断当前月份必须小于未来的轮转计划,清楚未来的轮转计划,重新设置计划
         * delete from rotationResultTemp where rotationDate>time() and rotationId=1;
         */
    }
    /**
     * @SWG\Post(path="/rotation-result-temp/down",
     *     tags={"云平台-rotationResultTemp-轮转中间表"},
     *     summary="下载",
     *     description="下载",
     *     produces={"application/json"},
     *     @SWG\Parameter(
     *        in = "formData",
     *        name = "Token",
     *        description = "Token",
     *        required = true,
     *        type = "integer",
     *     ),
     *     @SWG\Parameter(
     *        in = "formData",
     *        name = "rotationId",
     *        description = "轮转表id",
     *        required = true,
     *        type = "integer",
     *     ),
  
     *     @SWG\Response(
     *         response = 200,
     *         description = "返回班次类型列表"
     *     ),
     *     @SWG\Response(
     *         response = 422,
     *         description = "Data Validation Failed 创建失败",
     *     )
     * )
     *
     **/
    public function actionDown()
    {
        $aa = ['url'=>'http://downloads.jmagick.org/5.4.9/JMagick-5.4.9-0.tar.gz'];
        $this->serializer['errno']   = 0;
        $this->serializer['status']   = true;
        $this->serializer['message'] = "获取成功";
        return $aa;
    }
}